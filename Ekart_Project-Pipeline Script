pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        TRIVY_PATH = '/opt/homebrew/bin/trivy'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MytPraveen/Ekart.git'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Trivy') {
            steps {
                script {
                    sh "${TRIVY_PATH} fs ."
                }
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=EKART \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=EKART '''
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings-xml') {
                    sh "mvn clean package -DskipTests=true"
                }
            }
        }
        
        stage('Deploy to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings-xml') {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build & Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh " docker build -t shopping-cart:dev -f docker/Dockerfile ."
                        sh "docker tag shopping-cart:dev praveendevops95/shopping-cart:dev"
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh " docker push praveendevops95/shopping-cart:dev"
                    }
                }
            }
        }
    }
}